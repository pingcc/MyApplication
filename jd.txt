eureka+Zuul路由，网关+
eureka 注册中心  各个服务启动时，Eureka Client都会将服务注册到Eureka Server，并且Eureka Client还可以反过来从Eureka Server拉取注册表，从而知道其他服务在哪里
zuul  注册网关 各个服务启动时，Eureka Client都会将服务注册到Eureka Server，并且Eureka Client还可以反过来从Eureka Server拉取注册表，从而知道其他服务在哪里
ribbon 负载均衡 服务间发起请求的时候，基于Ribbon做负载均衡，从一个服务的多台机器中选择一台
feign 跨服务器通信 基于Feign的动态代理机制，根据注解和选择的机器，拼接请求URL地址，发起请求
Hystrix 线程池，隔离、通断，降级 发起请求是通过Hystrix的线程池来走的，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题
springCloud的rpc远程调用


四个在线项目（项目含小程序、数据中台、h5,移动混合开发）
1.参与导购、门店

JD:
掌握微服务架构springCloud
Jenkins

工作职责：
1.数据中心应用技术架构设计与落地
2.数据中台接口设计
3.数据中台需求分析与分解
4.数据中心开发资源管理
工作要求：
1.具备5年以上软件架构、设计和开发经验，具备处理疑难故障
及性能优化的经验
2.精通微服务框架springBoot/spring Cloud/Mybatis/Hibernate/Docker
/jenkins/redis/maven/linux等微服务框架
3.擅长消息中间件，分布式事务等互联网应用架构，具备主导设计互联网的项目
经验
4.熟悉关系数据库mysql、oracle、sql server至少掌握一种非关系型数据库
5.对Nginx负载均衡，读写分离myCat有一定的了解

培训主题：
搭建大数据平台架构
1.需要了解的开源框架
2.需要掌握的技能
a.如何快速的进行数据生成与采集
b.数据传输
c.数据入库（数据仓库）
d.数据计算
e.数据门户
























一、什么是分布式
不同模块部署在不同服务器上
作用：分布式解决网站高并发带来的问题，
好处：
1、降低服务器压力，
2、降低耦合度，团队开发，互不影响
3、某一个服务崩溃，不会影响整个项目
4、可以灵活的进行分布式部署
5、增加功能或者升级是，需要改动其中的一个服务
缺点：系统之间的交互要使用远程通信,接口开发增大工作量,但是利大于弊,
二、系统之间的交互
什么是集群
多台服务器部署相同应用构成一个集群
作用：通过负载均衡设备共同对外提供服务
三、什么是RPC
RPC 的全称是 Remote Procedure Call 是一种进程间通信方式。
它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即无论是调用本地接口/服务的还是远程的接口/服务，本质上编写的调用代码基本相同。
比如两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数或者方法，由于不在一个内存空间，不能直接调用，这时候需要通过就可以应用RPC框架的实现来解决
四、restful、soap、rpc
（1）RESTful是一种架构设计风格，提供了设计原则和约束条件，而不是架构。而满足这些约束条件和原则的应用程序或设计就是 RESTful架构或服务。
（2）SOAP，简单对象访问协议是一种数据交换协议规范，
是一种轻量的、简单的、基于XML的协议的规范。SOAP协议和HTTP协议一样，都是底层的通信协议，只是请求包的格式不同而已，SOAP包是XML格式的。
SOAP的消息是基于xml并封装成了符合http协议，因此，它符合任何路由器、 防火墙或代理服务器的要求。
soap可以使用任何语言来完成，只要发送正确的soap请求即可，基于soap的服务可以在任何平台无需修改即可正常使用。
（3）RPC就是从一台机器（客户端）上通过参数传递的方式调用另一台机器（服务器）上的一个函数或方法（可以统称为服务）并得到返回的结果。
RPC 会隐藏底层的通讯细节（不需要直接处理Socket通讯或Http通讯）
RPC 是一个请求响应模型。客户端发起请求，服务器返回响应（类似于Http的工作方式）
RPC 在使用形式上像调用本地函数（或方法）一样去调用远程的函数（或方法）。
rpc远程调用框架
几种比较典型的RPC的实现和调用框架。
（1）RMI实现，利用java.rmi包实现，基于Java远程方法协议(Java Remote Method Protocol)
和java的原生序列化。
（2）Hessian，是一个轻量级的remoting onhttp工具，使用简单的方法提供了RMI的功能。 基于HTTP协议，采用二进制编解码。
（3）thrift是一种可伸缩的跨语言服务的软件框架。thrift允许你定义一个描述文件，描述数据类型和服务接口。依据该文件，编译器方便地生成RPC客户端和服务器通信代码。
（4）SpringCloud 为开发人员提供了快速构建分布式系统的一些工具，包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等。
五、什么是SOA
业务系统分解为多个组件，让每个组件都独立提供离散，自治，可复用的服务能力
通过服务的组合和编排来实现上层的业务流程
作用：简化维护,降低整体风险,伸缩灵活
六、什么是微服务
架构设计概念,各服务间隔离（分布式也是隔离）,自治（分布式依赖整体组合）其它特性(单一职责,边界,异步通信,独立部署)是分布式概念的跟严格执行
 SOA到微服务架构的演进过程
 作用：各服务可独立应用，组合服务也可系统应用(巨石应用[monolith]的简化实现策略-平台思想)

 七、SpringCloud
 SpringCloud 为开发人员提供了快速构建分布式系统的一些工具，包括配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等。它运行环境简单，可以在开发人员的电脑上跑。

八、服务消费者(feign)
什么是Feign
Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。
它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。
Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。
简而言之：
Feign 采用的是基于接口的注解
Feign 整合了ribbon
 准备工作
继续用上一节的工程， 启动eureka-server，端口为8761; 启动service-hi 两次，端口分别为8762 、8773.
 准备工创建一个feign的服务
新建一个spring-boot工程，取名为serice-feign，在它的pom文件引入Feign的起步依赖spring-cloud-starter-feign、Eureka的起步依赖
spring-cloud-starter-eureka、Web的起步依赖spring-boot-starter-web，代码如下：

九、Hystrix断路器
在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），
在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用。为了保证其高可用，
单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证100%可用，
如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，
Servlet容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，
故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。
为了解决这个问题，业界提出了断路器模型。
7.1 什么是Hystrix
Netflix开源了Hystrix组件，实现了断路器模式，SpringCloud对这一组件进行了整合。
 在微服务架构中，一个请求需要调用多个服务是非常常见的，如下图：



前端工程师：
岗位职责：
活动H5开发和维护；
负责PC/移动端/官网前端开发；
负责后台管理系统的前端功能开发，持续改进产品的易用性与用户体验；
维护平台良好的性能和兼容性，优化产品性能和前端代码质量；
封装与维护前端通用组件，编写前端开发工具，提高开发效率；
新技术的学习、调研和应用
任职要求：
熟悉JavaScript语言，熟悉并能熟练使用流行的开源Javascript开发框架
或函数库（JQuery, Bootstrap, Angular, Ember等等）；
精通常用前端技术，包括HTML5/CSS3，熟悉W3C标准，
有较强的web界面制作和交互脚本编写能力；
熟悉一种或多种常用前端框架/库及相关技术，如js、Vue/React，angular、nodejs，小程序等；
熟悉常用工程化及模块化方案，如Webpack/RequireJS/Gulp等；
具备良好的编程习惯，有较好的接口设计与程序架构设计能力；
有移动端（APP/WAP）开发经验者，尤其有ios开发经验者，优先考虑；
积极向上，有良好的人际沟通能力，良好的工作协调能力，踏实肯干的工作精神。



后端工程师：

任职要求：
精通Java 编程语言，熟悉常用数据结构和算法，熟悉jvm原理、GC算法及参数调优等；
对各种开源的框架如spring boot、spring cloud、mybatis/Hibernate/dubbo等有一定的了解，1年以上微服务应用架构设计经验;
具备良好的分析解决问题能力，责任心强，良好的对外沟通和团队协作能力；
有Spring Cloud或者Dubbo微服务架构大型项目架构设计经验者优先;
熟悉多线程开发，有用Java基础支撑类平台研发的经验者优先；
熟练掌握TCP/IP协议、Socket通信、多线程、数据库、Mina或Netty框架等；
熟练掌握SQL语句，熟练使用mysql、MongoDB；
熟悉linux下常用命令、shell脚本编写、nginx配置等优先考虑。


面试流程：

谈谈 ： 阿里腾讯jd --业务中台和数据中台的理解

微服务的架构思想，


分布式，集群

微服务中的分库分表
本地如何连接数据库
如何快速实现报表设计

大数据的用途，为了解决什么问题，
用的大数据框架是什么

介绍一下你项目中的（工作流）流程引擎框架

高并发场景下秒杀系统的设计思路

规则引擎框架

基础面试：
高并发问题如何解决
如何保证redis和数据库的数据一致




































